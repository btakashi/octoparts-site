---
title: HTTP API
nav_order: 40
---

The REST API of Octoparts is relatively small. Those already familiar with <%= link_to "Swagger", "http://swagger.wordnik.com/" %> can simply head to the built-in Swagger documentation, which is hosted at <%= link_to "octoparts.herokuapp.com/swagger-ui", "http://octoparts.herokuapp.com/swagger-ui" %>.

## Basic overview

The API consists of:

* a registered dependencies discovery endpoint
* a single endpoint for invoking registered dependencies
* a set of cache invalidation endpoints


### Discovery endpoint

The discovery endpoint is used for programmatically discovering the dependencies that have been registered in a given Octoparts deployment. The response is a list of dependencies, with each item showing what URL it will hit, what parameters are registered to it, what HTTP method will be used when it is invoked, as well as cache-related settings.

### Code samples

#### Scala client examples

```scala
val someScala = "TODO"
def foo(a: Int): String = a.toString
```

#### Java client examples
```java
String someJava = "java";
```

### Dependency invocation endpoint

This is likely going to be your most-often used Octoparts endpoint. It is the endpoint that you will do a POST to in order to invoke your registered dependencies.

#### AggregateRequest

The POST body should be an `AggregateRequest`, which has a list of `PartRequest`s. Each `PartRequest` corresponds to a single invocation of a registered dependency and contains all the necessary parameters required.

#### AggregateResponse

The response from this endpoint will be an `AggregateResponse`, which has a list of `PartResponse`s, each one corresponding to the response that each invoked registered dependency has sent in response to a `PartRequest`.

Ways to use an `AggregateResponse` include:

* Ignoring it (maybe you don't care about the response)
* Map/filter over the list of `PartResponse`s to get information
  * _Note:_ each `PartResponse` has an id field, which will match the id provided in its corresponding PartRequest if one was provided but will default to the dependency id if the id field was not provided. In case you want to invoke the same registered dependency multiple times in a single Octoparts call)

### Code samples

#### Scala client examples
    <p>TODO</p>

#### Java client examples
    <p>TODO</p>

### Cache invalidation endpoints

The cache invalidation endpoints allow you to invalidate the cached responses stored in Octoparts.  The endpoints allow you to invalidate caches by dependency name, dependency name with parameter name-value pair, cache group name, and cache group name with parameter value.

For information on what this means in detail, see <%= link_to "Caching page", "/caching.html" %>

### Code samples

#### Scala client examples
    <p>TODO</p>

#### Java client examples
    <p>TODO</p>




