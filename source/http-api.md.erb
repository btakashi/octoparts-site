---
title: HTTP API
nav_order: 40
---

The REST API of Octoparts is relatively small. Those already familiar with <%= link_to "Swagger", "http://swagger.wordnik.com/" %> can simply head to the built-in Swagger documentation, which is hosted at <%= link_to "octoparts.herokuapp.com/swagger-ui", "http://octoparts.herokuapp.com/swagger-ui" %>.

## Basic overview

The API consists of endpoints for the following:

* registered backend endpoints discovery
* registered backend endpoints invocation
* cache invalidation

### Discovery

The discovery endpoint is used for programmatically discovering the backend endpoints that have been registered in a given Octoparts deployment. The response is a list of registered endpoints, with each item showing what URL will be hit with, what parameters are registered to it, what HTTP method will be used when it is invoked, as well as cache-related settings.

### Code samples

#### Scala client examples

```scala
val someScala = "TODO"
def foo(a: Int): String = a.toString
```

#### Java client examples
```java
String someJava = "java";
```

### Invocation

This is likely going to be your most-often used Octoparts endpoint. It is the endpoint that you will do a POST to in order to invoke your registered endpoints.

#### AggregateRequest

The POST body should be an `AggregateRequest`, which has a list of `PartRequest`s. Each `PartRequest` corresponds to a single invocation of a registered endpoint and contains all the necessary parameters required.

#### AggregateResponse

The response from this endpoint will be an `AggregateResponse`, which has a list of `PartResponse`s, each one corresponding to the response that each invoked registered endpoint has sent in response to a `PartRequest`.

Ways to use an `AggregateResponse` include:

* Ignoring it (maybe you don't care about the response)
* Map/filter over the list of `PartResponse`s to get information
  * _Note:_ each `PartResponse` has an id field, which will match the id provided in its corresponding PartRequest if one was provided but will default to the endpoint id if the id field was not provided. In case you want to invoke the same registered endpoint multiple times in a single Octoparts call

### Code samples

#### Scala client examples
    <p>TODO</p>

#### Java client examples
    <p>TODO</p>

### Cache invalidation

The cache invalidation endpoints allow you to invalidate the cached responses stored in Octoparts.  They allow you to invalidate caches by backend endpoint name, endpoint name with parameter name-value pair, cache group name, and cache group name with parameter value.

For information on what this means in detail, see <%= link_to "Caching page", "/caching.html" %>

### Code samples

#### Scala client examples
    <p>TODO</p>

#### Java client examples
    <p>TODO</p>


## API clients

While you're free to use the HTTP API directly, we also provide a couple of API clients.

### Java client

This client is actually implemented mostly in Scala, but it provides seamless Java interop. It's based on the [Ning AsyncHttpClient](https://github.com/AsyncHttpClient/async-http-client).

Maven:

```
<dependency>
  <groupId>com.m3</groupId>
  <artifactId>octoparts-java-client_2.11</artifactId>
  <version><%= data.versions.latest %></version>
</dependency>
```

<% note do %>
    We cross-build the Java client against both Scala 2.10 and 2.11, in case you already have a <code>scala-library.jar</code> on your classpath. Change the artifactId to <code>octoparts-java-client_2.10</code> if you prefer.
<% end %>

### Scala WS client

This is a Scala client, designed primarily to be used within a Play application, although it should work fine even if you're not using Play. It uses the Play WS library for its HTTP calls. 

SBT:

```
libraryDependencies ++= Seq(
  "com.m3" %% "octoparts-scala-ws-client" % "<%= data.versions.latest %>"
)
```

Just like the Java client, we cross-publish for Scala 2.10 and 2.11.
